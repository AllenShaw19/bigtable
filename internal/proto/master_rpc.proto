syntax = "proto3";

package bigtable;
option go_package = "github.com/allen-shaw/bigtable/internal/proto";

import "table_schema.proto";
import "table_meta.proto";
import "tabletnode.proto";

message CreateTableReq {
    string   table_name         = 1;
    optional TableSchema schema = 2;
    repeated bytes delimiters   = 3;
}
message CreateTableResp {
    optional TabletMetaList meta_list = 1;
}

message DeleteTableReq {
    string table_name = 1;
}
message DeleteTableResp {}

message DisableTableReq {
    string table_name = 1;
}
message DisableTableResp {}

message EnableTableReq {
    string table_name = 1;
}
message EnableTableResp {}

message UpdateTableReq {
    string   table_name         = 1;
    optional TableSchema schema = 2;
}
message UpdateTableResp {}

message UpdateCheckReq {
    string table_name = 1;
}
message UpdateCheckResp {
    optional bool done = 1;
}

message SearchTableReq {
    string   prefix_table_name       = 1;
    optional string start_table_name = 2;
    optional bytes start_tablet_key  = 3;
    optional uint32 max_num          = 4;
}
message SearchTableResp {
    optional TabletMetaList meta_list = 1;
    optional bool is_more             = 2;
}

message ShowTablesReq {
    optional string start_table_name = 2;
    optional bytes start_tablet_key  = 3;
    optional uint32 max_table_num    = 4;
    optional uint32 max_tablet_num   = 5;
    optional bytes user_token        = 6;
    optional bool all_brief          = 7;
}
message ShowTablesResp {
    optional TabletMetaList tablet_meta_list = 3;
    optional TableMetaList table_meta_list = 4;
    optional bool is_more = 5;
    optional bool all_brief = 7;
}

message ShowTabletNodesReq {
    optional string addr = 2;
    optional bool is_showall = 3; // default = true
    optional bytes user_token = 4;
}
message ShowTabletNodesResp {
    repeated TabletNodeInfo tabletnode_info = 3;
    optional TabletMetaList tabletmeta_list = 4;
}

// Tablet node
message RegisterReq {
    TabletNodeInfo tabletnode_info = 1;
}
message RegisterResp {}

message ReportReq {
    TabletNodeInfo tabletnode_info = 1;
}
message ReportResp {}

// admin
message CmdCtrlReq {
    string command = 2;
    repeated string arg_list = 3;
}
message CmdCtrlResp {
    optional bool bool_result = 3;
    optional string str_result = 4;
}

// acl
message UserInfo {
    string user_name = 1;
    repeated string group_name = 2;
    optional string token = 3;
}

enum UserOperateType {
    Unknown = 0;
    CreateUser = 1;
    DeleteUser = 2;
    ChangePwd = 3;
    ShowUser = 4;
    AddToGroup = 5;
    DeleteFromGroup = 6;
}

message OperateUserReq {
    optional bytes user_token = 1; // token of which user call this request
    optional UserInfo user_info = 2; // operated user
    optional UserOperateType op_type = 4;
}
message OperateUserResp {
    optional UserInfo user_info = 1;
}

service Master {
    rpc CreateTable(CreateTableReq) returns (CreateTableResp) {}
    rpc DeleteTable(DeleteTableReq) returns (DeleteTableResp) {}
    rpc DisableTable(DisableTableReq) returns (DisableTableResp) {} 
    rpc EnableTable(EnableTableReq) returns (EnableTableResp) {}
    rpc UpdateTable(UpdateTableReq) returns (UpdateTableResp) {}
    rpc UpdateCheck(UpdateCheckReq) returns (UpdateCheckResp) {}
    rpc SearchTable(SearchTableReq) returns (SearchTableResp) {}

    rpc ShowTables(ShowTablesReq) returns (ShowTablesResp) {}
    rpc ShowTabletNodes(ShowTabletNodesReq) returns (ShowTabletNodesResp) {}

    rpc Register(RegisterReq) returns (RegisterResp) {}
    rpc Report(ReportReq) returns (ReportResp) {}

    rpc CmdCtrl(CmdCtrlReq) returns (CmdCtrlResp) {}
    rpc OperateUser(OperateUserReq) returns (OperateUserResp) {}
}