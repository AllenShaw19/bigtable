// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: master_rpc.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MasterClient is the client API for Master service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MasterClient interface {
	CreateTable(ctx context.Context, in *CreateTableReq, opts ...grpc.CallOption) (*CreateTableResp, error)
	DeleteTable(ctx context.Context, in *DeleteTableReq, opts ...grpc.CallOption) (*DeleteTableResp, error)
	DisableTable(ctx context.Context, in *DisableTableReq, opts ...grpc.CallOption) (*DisableTableResp, error)
	EnableTable(ctx context.Context, in *EnableTableReq, opts ...grpc.CallOption) (*EnableTableResp, error)
	UpdateTable(ctx context.Context, in *UpdateTableReq, opts ...grpc.CallOption) (*UpdateTableResp, error)
	UpdateCheck(ctx context.Context, in *UpdateCheckReq, opts ...grpc.CallOption) (*UpdateCheckResp, error)
	SearchTable(ctx context.Context, in *SearchTableReq, opts ...grpc.CallOption) (*SearchTableResp, error)
	ShowTables(ctx context.Context, in *ShowTablesReq, opts ...grpc.CallOption) (*ShowTablesResp, error)
	ShowTabletNodes(ctx context.Context, in *ShowTabletNodesReq, opts ...grpc.CallOption) (*ShowTabletNodesResp, error)
	Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error)
	Report(ctx context.Context, in *ReportReq, opts ...grpc.CallOption) (*ReportResp, error)
	CmdCtrl(ctx context.Context, in *CmdCtrlReq, opts ...grpc.CallOption) (*CmdCtrlResp, error)
	OperateUser(ctx context.Context, in *OperateUserReq, opts ...grpc.CallOption) (*OperateUserResp, error)
}

type masterClient struct {
	cc grpc.ClientConnInterface
}

func NewMasterClient(cc grpc.ClientConnInterface) MasterClient {
	return &masterClient{cc}
}

func (c *masterClient) CreateTable(ctx context.Context, in *CreateTableReq, opts ...grpc.CallOption) (*CreateTableResp, error) {
	out := new(CreateTableResp)
	err := c.cc.Invoke(ctx, "/bigtable.Master/CreateTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) DeleteTable(ctx context.Context, in *DeleteTableReq, opts ...grpc.CallOption) (*DeleteTableResp, error) {
	out := new(DeleteTableResp)
	err := c.cc.Invoke(ctx, "/bigtable.Master/DeleteTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) DisableTable(ctx context.Context, in *DisableTableReq, opts ...grpc.CallOption) (*DisableTableResp, error) {
	out := new(DisableTableResp)
	err := c.cc.Invoke(ctx, "/bigtable.Master/DisableTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) EnableTable(ctx context.Context, in *EnableTableReq, opts ...grpc.CallOption) (*EnableTableResp, error) {
	out := new(EnableTableResp)
	err := c.cc.Invoke(ctx, "/bigtable.Master/EnableTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) UpdateTable(ctx context.Context, in *UpdateTableReq, opts ...grpc.CallOption) (*UpdateTableResp, error) {
	out := new(UpdateTableResp)
	err := c.cc.Invoke(ctx, "/bigtable.Master/UpdateTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) UpdateCheck(ctx context.Context, in *UpdateCheckReq, opts ...grpc.CallOption) (*UpdateCheckResp, error) {
	out := new(UpdateCheckResp)
	err := c.cc.Invoke(ctx, "/bigtable.Master/UpdateCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) SearchTable(ctx context.Context, in *SearchTableReq, opts ...grpc.CallOption) (*SearchTableResp, error) {
	out := new(SearchTableResp)
	err := c.cc.Invoke(ctx, "/bigtable.Master/SearchTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) ShowTables(ctx context.Context, in *ShowTablesReq, opts ...grpc.CallOption) (*ShowTablesResp, error) {
	out := new(ShowTablesResp)
	err := c.cc.Invoke(ctx, "/bigtable.Master/ShowTables", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) ShowTabletNodes(ctx context.Context, in *ShowTabletNodesReq, opts ...grpc.CallOption) (*ShowTabletNodesResp, error) {
	out := new(ShowTabletNodesResp)
	err := c.cc.Invoke(ctx, "/bigtable.Master/ShowTabletNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error) {
	out := new(RegisterResp)
	err := c.cc.Invoke(ctx, "/bigtable.Master/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) Report(ctx context.Context, in *ReportReq, opts ...grpc.CallOption) (*ReportResp, error) {
	out := new(ReportResp)
	err := c.cc.Invoke(ctx, "/bigtable.Master/Report", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) CmdCtrl(ctx context.Context, in *CmdCtrlReq, opts ...grpc.CallOption) (*CmdCtrlResp, error) {
	out := new(CmdCtrlResp)
	err := c.cc.Invoke(ctx, "/bigtable.Master/CmdCtrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) OperateUser(ctx context.Context, in *OperateUserReq, opts ...grpc.CallOption) (*OperateUserResp, error) {
	out := new(OperateUserResp)
	err := c.cc.Invoke(ctx, "/bigtable.Master/OperateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MasterServer is the server API for Master service.
// All implementations must embed UnimplementedMasterServer
// for forward compatibility
type MasterServer interface {
	CreateTable(context.Context, *CreateTableReq) (*CreateTableResp, error)
	DeleteTable(context.Context, *DeleteTableReq) (*DeleteTableResp, error)
	DisableTable(context.Context, *DisableTableReq) (*DisableTableResp, error)
	EnableTable(context.Context, *EnableTableReq) (*EnableTableResp, error)
	UpdateTable(context.Context, *UpdateTableReq) (*UpdateTableResp, error)
	UpdateCheck(context.Context, *UpdateCheckReq) (*UpdateCheckResp, error)
	SearchTable(context.Context, *SearchTableReq) (*SearchTableResp, error)
	ShowTables(context.Context, *ShowTablesReq) (*ShowTablesResp, error)
	ShowTabletNodes(context.Context, *ShowTabletNodesReq) (*ShowTabletNodesResp, error)
	Register(context.Context, *RegisterReq) (*RegisterResp, error)
	Report(context.Context, *ReportReq) (*ReportResp, error)
	CmdCtrl(context.Context, *CmdCtrlReq) (*CmdCtrlResp, error)
	OperateUser(context.Context, *OperateUserReq) (*OperateUserResp, error)
	mustEmbedUnimplementedMasterServer()
}

// UnimplementedMasterServer must be embedded to have forward compatible implementations.
type UnimplementedMasterServer struct {
}

func (UnimplementedMasterServer) CreateTable(context.Context, *CreateTableReq) (*CreateTableResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTable not implemented")
}
func (UnimplementedMasterServer) DeleteTable(context.Context, *DeleteTableReq) (*DeleteTableResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTable not implemented")
}
func (UnimplementedMasterServer) DisableTable(context.Context, *DisableTableReq) (*DisableTableResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableTable not implemented")
}
func (UnimplementedMasterServer) EnableTable(context.Context, *EnableTableReq) (*EnableTableResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableTable not implemented")
}
func (UnimplementedMasterServer) UpdateTable(context.Context, *UpdateTableReq) (*UpdateTableResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTable not implemented")
}
func (UnimplementedMasterServer) UpdateCheck(context.Context, *UpdateCheckReq) (*UpdateCheckResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCheck not implemented")
}
func (UnimplementedMasterServer) SearchTable(context.Context, *SearchTableReq) (*SearchTableResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchTable not implemented")
}
func (UnimplementedMasterServer) ShowTables(context.Context, *ShowTablesReq) (*ShowTablesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowTables not implemented")
}
func (UnimplementedMasterServer) ShowTabletNodes(context.Context, *ShowTabletNodesReq) (*ShowTabletNodesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowTabletNodes not implemented")
}
func (UnimplementedMasterServer) Register(context.Context, *RegisterReq) (*RegisterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedMasterServer) Report(context.Context, *ReportReq) (*ReportResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Report not implemented")
}
func (UnimplementedMasterServer) CmdCtrl(context.Context, *CmdCtrlReq) (*CmdCtrlResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CmdCtrl not implemented")
}
func (UnimplementedMasterServer) OperateUser(context.Context, *OperateUserReq) (*OperateUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OperateUser not implemented")
}
func (UnimplementedMasterServer) mustEmbedUnimplementedMasterServer() {}

// UnsafeMasterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MasterServer will
// result in compilation errors.
type UnsafeMasterServer interface {
	mustEmbedUnimplementedMasterServer()
}

func RegisterMasterServer(s grpc.ServiceRegistrar, srv MasterServer) {
	s.RegisterService(&Master_ServiceDesc, srv)
}

func _Master_CreateTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTableReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).CreateTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bigtable.Master/CreateTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).CreateTable(ctx, req.(*CreateTableReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_DeleteTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTableReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).DeleteTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bigtable.Master/DeleteTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).DeleteTable(ctx, req.(*DeleteTableReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_DisableTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableTableReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).DisableTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bigtable.Master/DisableTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).DisableTable(ctx, req.(*DisableTableReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_EnableTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableTableReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).EnableTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bigtable.Master/EnableTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).EnableTable(ctx, req.(*EnableTableReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_UpdateTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTableReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).UpdateTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bigtable.Master/UpdateTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).UpdateTable(ctx, req.(*UpdateTableReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_UpdateCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCheckReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).UpdateCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bigtable.Master/UpdateCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).UpdateCheck(ctx, req.(*UpdateCheckReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_SearchTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchTableReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).SearchTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bigtable.Master/SearchTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).SearchTable(ctx, req.(*SearchTableReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_ShowTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowTablesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).ShowTables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bigtable.Master/ShowTables",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).ShowTables(ctx, req.(*ShowTablesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_ShowTabletNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowTabletNodesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).ShowTabletNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bigtable.Master/ShowTabletNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).ShowTabletNodes(ctx, req.(*ShowTabletNodesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bigtable.Master/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).Register(ctx, req.(*RegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_Report_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).Report(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bigtable.Master/Report",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).Report(ctx, req.(*ReportReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_CmdCtrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CmdCtrlReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).CmdCtrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bigtable.Master/CmdCtrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).CmdCtrl(ctx, req.(*CmdCtrlReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_OperateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperateUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).OperateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bigtable.Master/OperateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).OperateUser(ctx, req.(*OperateUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Master_ServiceDesc is the grpc.ServiceDesc for Master service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Master_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bigtable.Master",
	HandlerType: (*MasterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTable",
			Handler:    _Master_CreateTable_Handler,
		},
		{
			MethodName: "DeleteTable",
			Handler:    _Master_DeleteTable_Handler,
		},
		{
			MethodName: "DisableTable",
			Handler:    _Master_DisableTable_Handler,
		},
		{
			MethodName: "EnableTable",
			Handler:    _Master_EnableTable_Handler,
		},
		{
			MethodName: "UpdateTable",
			Handler:    _Master_UpdateTable_Handler,
		},
		{
			MethodName: "UpdateCheck",
			Handler:    _Master_UpdateCheck_Handler,
		},
		{
			MethodName: "SearchTable",
			Handler:    _Master_SearchTable_Handler,
		},
		{
			MethodName: "ShowTables",
			Handler:    _Master_ShowTables_Handler,
		},
		{
			MethodName: "ShowTabletNodes",
			Handler:    _Master_ShowTabletNodes_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _Master_Register_Handler,
		},
		{
			MethodName: "Report",
			Handler:    _Master_Report_Handler,
		},
		{
			MethodName: "CmdCtrl",
			Handler:    _Master_CmdCtrl_Handler,
		},
		{
			MethodName: "OperateUser",
			Handler:    _Master_OperateUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "master_rpc.proto",
}
