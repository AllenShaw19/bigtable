// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.12
// source: table_meta.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TabletMeta_TabletStatus int32

const (
	TabletMeta_TabletUnknown TabletMeta_TabletStatus = 0
	TabletMeta_TabletNotInit TabletMeta_TabletStatus = 1
	TabletMeta_TabletReady   TabletMeta_TabletStatus = 2
	TabletMeta_TabletLoading TabletMeta_TabletStatus = 3
	TabletMeta_TabletOnSplit TabletMeta_TabletStatus = 4
	// TabletUnload = 5;
	TabletMeta_TabletMerged        TabletMeta_TabletStatus = 6
	TabletMeta_TabletSplitted      TabletMeta_TabletStatus = 7
	TabletMeta_TabletUnloading     TabletMeta_TabletStatus = 8
	TabletMeta_TabletOffline       TabletMeta_TabletStatus = 9
	TabletMeta_TabletLoadFail      TabletMeta_TabletStatus = 10
	TabletMeta_TabletUnloadFail    TabletMeta_TabletStatus = 11
	TabletMeta_TabletDisable       TabletMeta_TabletStatus = 12
	TabletMeta_TabletDelayOffline  TabletMeta_TabletStatus = 13
	TabletMeta_TabletUnloading2    TabletMeta_TabletStatus = 14
	TabletMeta_TabletCorruption    TabletMeta_TabletStatus = 15
	TabletMeta_TabletManifestError TabletMeta_TabletStatus = 16
)

// Enum value maps for TabletMeta_TabletStatus.
var (
	TabletMeta_TabletStatus_name = map[int32]string{
		0:  "TabletUnknown",
		1:  "TabletNotInit",
		2:  "TabletReady",
		3:  "TabletLoading",
		4:  "TabletOnSplit",
		6:  "TabletMerged",
		7:  "TabletSplitted",
		8:  "TabletUnloading",
		9:  "TabletOffline",
		10: "TabletLoadFail",
		11: "TabletUnloadFail",
		12: "TabletDisable",
		13: "TabletDelayOffline",
		14: "TabletUnloading2",
		15: "TabletCorruption",
		16: "TabletManifestError",
	}
	TabletMeta_TabletStatus_value = map[string]int32{
		"TabletUnknown":       0,
		"TabletNotInit":       1,
		"TabletReady":         2,
		"TabletLoading":       3,
		"TabletOnSplit":       4,
		"TabletMerged":        6,
		"TabletSplitted":      7,
		"TabletUnloading":     8,
		"TabletOffline":       9,
		"TabletLoadFail":      10,
		"TabletUnloadFail":    11,
		"TabletDisable":       12,
		"TabletDelayOffline":  13,
		"TabletUnloading2":    14,
		"TabletCorruption":    15,
		"TabletManifestError": 16,
	}
)

func (x TabletMeta_TabletStatus) Enum() *TabletMeta_TabletStatus {
	p := new(TabletMeta_TabletStatus)
	*p = x
	return p
}

func (x TabletMeta_TabletStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TabletMeta_TabletStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_table_meta_proto_enumTypes[0].Descriptor()
}

func (TabletMeta_TabletStatus) Type() protoreflect.EnumType {
	return &file_table_meta_proto_enumTypes[0]
}

func (x TabletMeta_TabletStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TabletMeta_TabletStatus.Descriptor instead.
func (TabletMeta_TabletStatus) EnumDescriptor() ([]byte, []int) {
	return file_table_meta_proto_rawDescGZIP(), []int{4, 0}
}

type KeyRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyStart []byte `protobuf:"bytes,1,opt,name=key_start,json=keyStart,proto3,oneof" json:"key_start,omitempty"`
	KeyEnd   []byte `protobuf:"bytes,2,opt,name=key_end,json=keyEnd,proto3,oneof" json:"key_end,omitempty"`
}

func (x *KeyRange) Reset() {
	*x = KeyRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_table_meta_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyRange) ProtoMessage() {}

func (x *KeyRange) ProtoReflect() protoreflect.Message {
	mi := &file_table_meta_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyRange.ProtoReflect.Descriptor instead.
func (*KeyRange) Descriptor() ([]byte, []int) {
	return file_table_meta_proto_rawDescGZIP(), []int{0}
}

func (x *KeyRange) GetKeyStart() []byte {
	if x != nil {
		return x.KeyStart
	}
	return nil
}

func (x *KeyRange) GetKeyEnd() []byte {
	if x != nil {
		return x.KeyEnd
	}
	return nil
}

// TODO:应该改名为Metric更好？
type TableCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lread       *int64  `protobuf:"varint,1,opt,name=lread,proto3,oneof" json:"lread,omitempty"`
	ScanRows    *int64  `protobuf:"varint,2,opt,name=scan_rows,json=scanRows,proto3,oneof" json:"scan_rows,omitempty"`
	ScanMax     *int64  `protobuf:"varint,3,opt,name=scan_max,json=scanMax,proto3,oneof" json:"scan_max,omitempty"`
	ScanSize    *int64  `protobuf:"varint,4,opt,name=scan_size,json=scanSize,proto3,oneof" json:"scan_size,omitempty"`
	ReadRows    *int64  `protobuf:"varint,5,opt,name=read_rows,json=readRows,proto3,oneof" json:"read_rows,omitempty"`
	ReadMax     *int64  `protobuf:"varint,6,opt,name=read_max,json=readMax,proto3,oneof" json:"read_max,omitempty"`
	ReadSize    *int64  `protobuf:"varint,7,opt,name=read_size,json=readSize,proto3,oneof" json:"read_size,omitempty"`
	WriteRows   *int64  `protobuf:"varint,8,opt,name=write_rows,json=writeRows,proto3,oneof" json:"write_rows,omitempty"`
	WriteMax    *int64  `protobuf:"varint,9,opt,name=write_max,json=writeMax,proto3,oneof" json:"write_max,omitempty"`
	WriteSize   *int64  `protobuf:"varint,10,opt,name=write_size,json=writeSize,proto3,oneof" json:"write_size,omitempty"`
	TabletNum   *int64  `protobuf:"varint,20,opt,name=tablet_num,json=tabletNum,proto3,oneof" json:"tablet_num,omitempty"`
	NotreadyNum *int64  `protobuf:"varint,21,opt,name=notready_num,json=notreadyNum,proto3,oneof" json:"notready_num,omitempty"`
	Size        *int64  `protobuf:"varint,22,opt,name=size,proto3,oneof" json:"size,omitempty"`
	LgSize      []int64 `protobuf:"varint,23,rep,packed,name=lg_size,json=lgSize,proto3" json:"lg_size,omitempty"`
}

func (x *TableCounter) Reset() {
	*x = TableCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_table_meta_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableCounter) ProtoMessage() {}

func (x *TableCounter) ProtoReflect() protoreflect.Message {
	mi := &file_table_meta_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableCounter.ProtoReflect.Descriptor instead.
func (*TableCounter) Descriptor() ([]byte, []int) {
	return file_table_meta_proto_rawDescGZIP(), []int{1}
}

func (x *TableCounter) GetLread() int64 {
	if x != nil && x.Lread != nil {
		return *x.Lread
	}
	return 0
}

func (x *TableCounter) GetScanRows() int64 {
	if x != nil && x.ScanRows != nil {
		return *x.ScanRows
	}
	return 0
}

func (x *TableCounter) GetScanMax() int64 {
	if x != nil && x.ScanMax != nil {
		return *x.ScanMax
	}
	return 0
}

func (x *TableCounter) GetScanSize() int64 {
	if x != nil && x.ScanSize != nil {
		return *x.ScanSize
	}
	return 0
}

func (x *TableCounter) GetReadRows() int64 {
	if x != nil && x.ReadRows != nil {
		return *x.ReadRows
	}
	return 0
}

func (x *TableCounter) GetReadMax() int64 {
	if x != nil && x.ReadMax != nil {
		return *x.ReadMax
	}
	return 0
}

func (x *TableCounter) GetReadSize() int64 {
	if x != nil && x.ReadSize != nil {
		return *x.ReadSize
	}
	return 0
}

func (x *TableCounter) GetWriteRows() int64 {
	if x != nil && x.WriteRows != nil {
		return *x.WriteRows
	}
	return 0
}

func (x *TableCounter) GetWriteMax() int64 {
	if x != nil && x.WriteMax != nil {
		return *x.WriteMax
	}
	return 0
}

func (x *TableCounter) GetWriteSize() int64 {
	if x != nil && x.WriteSize != nil {
		return *x.WriteSize
	}
	return 0
}

func (x *TableCounter) GetTabletNum() int64 {
	if x != nil && x.TabletNum != nil {
		return *x.TabletNum
	}
	return 0
}

func (x *TableCounter) GetNotreadyNum() int64 {
	if x != nil && x.NotreadyNum != nil {
		return *x.NotreadyNum
	}
	return 0
}

func (x *TableCounter) GetSize() int64 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

func (x *TableCounter) GetLgSize() []int64 {
	if x != nil {
		return x.LgSize
	}
	return nil
}

type TabletCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LowReadCell   *uint32                  `protobuf:"varint,1,opt,name=low_read_cell,json=lowReadCell,proto3,oneof" json:"low_read_cell,omitempty"`
	ScanRows      *uint32                  `protobuf:"varint,2,opt,name=scan_rows,json=scanRows,proto3,oneof" json:"scan_rows,omitempty"`
	ScanKvs       *uint32                  `protobuf:"varint,3,opt,name=scan_kvs,json=scanKvs,proto3,oneof" json:"scan_kvs,omitempty"`
	ScanSize      *uint32                  `protobuf:"varint,4,opt,name=scan_size,json=scanSize,proto3,oneof" json:"scan_size,omitempty"`
	ReadRows      *uint32                  `protobuf:"varint,5,opt,name=read_rows,json=readRows,proto3,oneof" json:"read_rows,omitempty"`
	ReadKvs       *uint32                  `protobuf:"varint,6,opt,name=read_kvs,json=readKvs,proto3,oneof" json:"read_kvs,omitempty"`
	ReadSize      *uint32                  `protobuf:"varint,7,opt,name=read_size,json=readSize,proto3,oneof" json:"read_size,omitempty"`
	WriteRows     *uint32                  `protobuf:"varint,8,opt,name=write_rows,json=writeRows,proto3,oneof" json:"write_rows,omitempty"`
	WriteKvs      *uint32                  `protobuf:"varint,9,opt,name=write_kvs,json=writeKvs,proto3,oneof" json:"write_kvs,omitempty"`
	WriteSize     *uint32                  `protobuf:"varint,10,opt,name=write_size,json=writeSize,proto3,oneof" json:"write_size,omitempty"`
	WriteWorkload *float64                 `protobuf:"fixed64,11,opt,name=write_workload,json=writeWorkload,proto3,oneof" json:"write_workload,omitempty"`
	IsOnBusy      *bool                    `protobuf:"varint,15,opt,name=is_on_busy,json=isOnBusy,proto3,oneof" json:"is_on_busy,omitempty"`
	DbStatus      *TabletMeta_TabletStatus `protobuf:"varint,16,opt,name=db_status,json=dbStatus,proto3,enum=bigtable.TabletMeta_TabletStatus,oneof" json:"db_status,omitempty"`
}

func (x *TabletCounter) Reset() {
	*x = TabletCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_table_meta_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TabletCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TabletCounter) ProtoMessage() {}

func (x *TabletCounter) ProtoReflect() protoreflect.Message {
	mi := &file_table_meta_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TabletCounter.ProtoReflect.Descriptor instead.
func (*TabletCounter) Descriptor() ([]byte, []int) {
	return file_table_meta_proto_rawDescGZIP(), []int{2}
}

func (x *TabletCounter) GetLowReadCell() uint32 {
	if x != nil && x.LowReadCell != nil {
		return *x.LowReadCell
	}
	return 0
}

func (x *TabletCounter) GetScanRows() uint32 {
	if x != nil && x.ScanRows != nil {
		return *x.ScanRows
	}
	return 0
}

func (x *TabletCounter) GetScanKvs() uint32 {
	if x != nil && x.ScanKvs != nil {
		return *x.ScanKvs
	}
	return 0
}

func (x *TabletCounter) GetScanSize() uint32 {
	if x != nil && x.ScanSize != nil {
		return *x.ScanSize
	}
	return 0
}

func (x *TabletCounter) GetReadRows() uint32 {
	if x != nil && x.ReadRows != nil {
		return *x.ReadRows
	}
	return 0
}

func (x *TabletCounter) GetReadKvs() uint32 {
	if x != nil && x.ReadKvs != nil {
		return *x.ReadKvs
	}
	return 0
}

func (x *TabletCounter) GetReadSize() uint32 {
	if x != nil && x.ReadSize != nil {
		return *x.ReadSize
	}
	return 0
}

func (x *TabletCounter) GetWriteRows() uint32 {
	if x != nil && x.WriteRows != nil {
		return *x.WriteRows
	}
	return 0
}

func (x *TabletCounter) GetWriteKvs() uint32 {
	if x != nil && x.WriteKvs != nil {
		return *x.WriteKvs
	}
	return 0
}

func (x *TabletCounter) GetWriteSize() uint32 {
	if x != nil && x.WriteSize != nil {
		return *x.WriteSize
	}
	return 0
}

func (x *TabletCounter) GetWriteWorkload() float64 {
	if x != nil && x.WriteWorkload != nil {
		return *x.WriteWorkload
	}
	return 0
}

func (x *TabletCounter) GetIsOnBusy() bool {
	if x != nil && x.IsOnBusy != nil {
		return *x.IsOnBusy
	}
	return false
}

func (x *TabletCounter) GetDbStatus() TabletMeta_TabletStatus {
	if x != nil && x.DbStatus != nil {
		return *x.DbStatus
	}
	return TabletMeta_TabletUnknown
}

type TableMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableName      *string         `protobuf:"bytes,1,opt,name=table_name,json=tableName,proto3,oneof" json:"table_name,omitempty"`
	Status         *TableStatus    `protobuf:"varint,2,opt,name=status,proto3,enum=bigtable.TableStatus,oneof" json:"status,omitempty"`
	Schema         *TableSchema    `protobuf:"bytes,3,opt,name=schema,proto3,oneof" json:"schema,omitempty"`
	CreateTime     *uint64         `protobuf:"varint,5,opt,name=create_time,json=createTime,proto3,oneof" json:"create_time,omitempty"`
	AuthPolicyType *AuthPolicyType `protobuf:"varint,8,opt,name=auth_policy_type,json=authPolicyType,proto3,enum=bigtable.AuthPolicyType,oneof" json:"auth_policy_type,omitempty"`
}

func (x *TableMeta) Reset() {
	*x = TableMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_table_meta_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableMeta) ProtoMessage() {}

func (x *TableMeta) ProtoReflect() protoreflect.Message {
	mi := &file_table_meta_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableMeta.ProtoReflect.Descriptor instead.
func (*TableMeta) Descriptor() ([]byte, []int) {
	return file_table_meta_proto_rawDescGZIP(), []int{3}
}

func (x *TableMeta) GetTableName() string {
	if x != nil && x.TableName != nil {
		return *x.TableName
	}
	return ""
}

func (x *TableMeta) GetStatus() TableStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return TableStatus_TableUnknown
}

func (x *TableMeta) GetSchema() *TableSchema {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *TableMeta) GetCreateTime() uint64 {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return 0
}

func (x *TableMeta) GetAuthPolicyType() AuthPolicyType {
	if x != nil && x.AuthPolicyType != nil {
		return *x.AuthPolicyType
	}
	return AuthPolicyType_NoneAuthPolicy
}

type TabletMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableName       string                   `protobuf:"bytes,1,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	Path            string                   `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	KeyRange        *KeyRange                `protobuf:"bytes,3,opt,name=key_range,json=keyRange,proto3" json:"key_range,omitempty"`
	ServerAddr      *string                  `protobuf:"bytes,4,opt,name=server_addr,json=serverAddr,proto3,oneof" json:"server_addr,omitempty"`
	Status          *TabletMeta_TabletStatus `protobuf:"varint,5,opt,name=status,proto3,enum=bigtable.TabletMeta_TabletStatus,oneof" json:"status,omitempty"`
	Size            *int64                   `protobuf:"varint,6,opt,name=size,proto3,oneof" json:"size,omitempty"`
	Compress        *bool                    `protobuf:"varint,7,opt,name=compress,proto3,oneof" json:"compress,omitempty"`
	CompactStatus   *CompactStatus           `protobuf:"varint,8,opt,name=compact_status,json=compactStatus,proto3,enum=bigtable.CompactStatus,oneof" json:"compact_status,omitempty"`
	StoreMedium     *StoreMedium             `protobuf:"varint,9,opt,name=store_medium,json=storeMedium,proto3,enum=bigtable.StoreMedium,oneof" json:"store_medium,omitempty"` /// default:DiskStore
	ParentTablets   uint64                   `protobuf:"varint,12,opt,name=parent_tablets,json=parentTablets,proto3" json:"parent_tablets,omitempty"`
	LgSize          int64                    `protobuf:"varint,13,opt,name=lg_size,json=lgSize,proto3" json:"lg_size,omitempty"`
	LastMoveTimeUs  *int64                   `protobuf:"varint,15,opt,name=last_move_time_us,json=lastMoveTimeUs,proto3,oneof" json:"last_move_time_us,omitempty"`
	DataSizeOnFlash *int64                   `protobuf:"varint,16,opt,name=data_size_on_flash,json=dataSizeOnFlash,proto3,oneof" json:"data_size_on_flash,omitempty"`
	CreateTime      *int64                   `protobuf:"varint,17,opt,name=create_time,json=createTime,proto3,oneof" json:"create_time,omitempty"`
	Version         *uint64                  `protobuf:"varint,18,opt,name=version,proto3,oneof" json:"version,omitempty"`
}

func (x *TabletMeta) Reset() {
	*x = TabletMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_table_meta_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TabletMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TabletMeta) ProtoMessage() {}

func (x *TabletMeta) ProtoReflect() protoreflect.Message {
	mi := &file_table_meta_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TabletMeta.ProtoReflect.Descriptor instead.
func (*TabletMeta) Descriptor() ([]byte, []int) {
	return file_table_meta_proto_rawDescGZIP(), []int{4}
}

func (x *TabletMeta) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *TabletMeta) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *TabletMeta) GetKeyRange() *KeyRange {
	if x != nil {
		return x.KeyRange
	}
	return nil
}

func (x *TabletMeta) GetServerAddr() string {
	if x != nil && x.ServerAddr != nil {
		return *x.ServerAddr
	}
	return ""
}

func (x *TabletMeta) GetStatus() TabletMeta_TabletStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return TabletMeta_TabletUnknown
}

func (x *TabletMeta) GetSize() int64 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

func (x *TabletMeta) GetCompress() bool {
	if x != nil && x.Compress != nil {
		return *x.Compress
	}
	return false
}

func (x *TabletMeta) GetCompactStatus() CompactStatus {
	if x != nil && x.CompactStatus != nil {
		return *x.CompactStatus
	}
	return CompactStatus_TabletUnknown
}

func (x *TabletMeta) GetStoreMedium() StoreMedium {
	if x != nil && x.StoreMedium != nil {
		return *x.StoreMedium
	}
	return StoreMedium_DiskStore
}

func (x *TabletMeta) GetParentTablets() uint64 {
	if x != nil {
		return x.ParentTablets
	}
	return 0
}

func (x *TabletMeta) GetLgSize() int64 {
	if x != nil {
		return x.LgSize
	}
	return 0
}

func (x *TabletMeta) GetLastMoveTimeUs() int64 {
	if x != nil && x.LastMoveTimeUs != nil {
		return *x.LastMoveTimeUs
	}
	return 0
}

func (x *TabletMeta) GetDataSizeOnFlash() int64 {
	if x != nil && x.DataSizeOnFlash != nil {
		return *x.DataSizeOnFlash
	}
	return 0
}

func (x *TabletMeta) GetCreateTime() int64 {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return 0
}

func (x *TabletMeta) GetVersion() uint64 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

type TableMetaList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta    []*TableMeta    `protobuf:"bytes,1,rep,name=meta,proto3" json:"meta,omitempty"`
	Counter []*TableCounter `protobuf:"bytes,2,rep,name=counter,proto3" json:"counter,omitempty"`
}

func (x *TableMetaList) Reset() {
	*x = TableMetaList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_table_meta_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableMetaList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableMetaList) ProtoMessage() {}

func (x *TableMetaList) ProtoReflect() protoreflect.Message {
	mi := &file_table_meta_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableMetaList.ProtoReflect.Descriptor instead.
func (*TableMetaList) Descriptor() ([]byte, []int) {
	return file_table_meta_proto_rawDescGZIP(), []int{5}
}

func (x *TableMetaList) GetMeta() []*TableMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *TableMetaList) GetCounter() []*TableCounter {
	if x != nil {
		return x.Counter
	}
	return nil
}

type TabletMetaList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta      []*TabletMeta    `protobuf:"bytes,1,rep,name=meta,proto3" json:"meta,omitempty"`
	Counter   []*TabletCounter `protobuf:"bytes,2,rep,name=counter,proto3" json:"counter,omitempty"`
	Timestamp []int64          `protobuf:"varint,3,rep,packed,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *TabletMetaList) Reset() {
	*x = TabletMetaList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_table_meta_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TabletMetaList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TabletMetaList) ProtoMessage() {}

func (x *TabletMetaList) ProtoReflect() protoreflect.Message {
	mi := &file_table_meta_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TabletMetaList.ProtoReflect.Descriptor instead.
func (*TabletMetaList) Descriptor() ([]byte, []int) {
	return file_table_meta_proto_rawDescGZIP(), []int{6}
}

func (x *TabletMetaList) GetMeta() []*TabletMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *TabletMetaList) GetCounter() []*TabletCounter {
	if x != nil {
		return x.Counter
	}
	return nil
}

func (x *TabletMetaList) GetTimestamp() []int64 {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

var File_table_meta_proto protoreflect.FileDescriptor

var file_table_meta_proto_rawDesc = []byte{
	0x0a, 0x10, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x08, 0x62, 0x69, 0x67, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0x12, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x11, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x64, 0x0a, 0x08, 0x4b, 0x65, 0x79,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x5f, 0x65,
	0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x06, 0x6b, 0x65, 0x79, 0x45,
	0x6e, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x65, 0x6e, 0x64, 0x22,
	0x8a, 0x05, 0x0a, 0x0c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x12, 0x19, 0x0a, 0x05, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x00, 0x52, 0x05, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73,
	0x63, 0x61, 0x6e, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01,
	0x52, 0x08, 0x73, 0x63, 0x61, 0x6e, 0x52, 0x6f, 0x77, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a,
	0x08, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x02, 0x52, 0x07, 0x73, 0x63, 0x61, 0x6e, 0x4d, 0x61, 0x78, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a,
	0x09, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x03, 0x52, 0x08, 0x73, 0x63, 0x61, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x20, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x04, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x52, 0x6f, 0x77, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x1e, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x05, 0x52, 0x07, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x61, 0x78, 0x88, 0x01,
	0x01, 0x12, 0x20, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x06, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x53, 0x69, 0x7a, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x72, 0x6f, 0x77,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x48, 0x07, 0x52, 0x09, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x52, 0x6f, 0x77, 0x73, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x5f, 0x6d, 0x61, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x48, 0x08, 0x52, 0x08, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x4d, 0x61, 0x78, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x48, 0x09, 0x52,
	0x09, 0x77, 0x72, 0x69, 0x74, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a,
	0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x0a, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x4e, 0x75, 0x6d, 0x88, 0x01,
	0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x6e, 0x75,
	0x6d, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x48, 0x0b, 0x52, 0x0b, 0x6e, 0x6f, 0x74, 0x72, 0x65,
	0x61, 0x64, 0x79, 0x4e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x48, 0x0c, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x67, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x17, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x06, 0x6c, 0x67, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x6c, 0x72, 0x65, 0x61, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x72,
	0x6f, 0x77, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x6d, 0x61, 0x78,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d, 0x61, 0x78, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x65,
	0x61, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x5f, 0x6d, 0x61, 0x78, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x6e,
	0x75, 0x6d, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6e, 0x6f, 0x74, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f,
	0x6e, 0x75, 0x6d, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x22, 0xbe, 0x05, 0x0a,
	0x0d, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x27,
	0x0a, 0x0d, 0x6c, 0x6f, 0x77, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0b, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x61, 0x64,
	0x43, 0x65, 0x6c, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x63, 0x61, 0x6e, 0x5f,
	0x72, 0x6f, 0x77, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x08, 0x73, 0x63,
	0x61, 0x6e, 0x52, 0x6f, 0x77, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x73, 0x63, 0x61,
	0x6e, 0x5f, 0x6b, 0x76, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x02, 0x52, 0x07, 0x73,
	0x63, 0x61, 0x6e, 0x4b, 0x76, 0x73, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x63, 0x61,
	0x6e, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x03, 0x52, 0x08,
	0x73, 0x63, 0x61, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x72,
	0x65, 0x61, 0x64, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x04,
	0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x52, 0x6f, 0x77, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a,
	0x08, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6b, 0x76, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x05, 0x52, 0x07, 0x72, 0x65, 0x61, 0x64, 0x4b, 0x76, 0x73, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a,
	0x09, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x06, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x07, 0x52, 0x09, 0x77, 0x72, 0x69, 0x74, 0x65, 0x52, 0x6f, 0x77, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x6b, 0x76, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x08, 0x52, 0x08, 0x77, 0x72, 0x69, 0x74, 0x65, 0x4b,
	0x76, 0x73, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x09, 0x52, 0x09, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x0a, 0x52, 0x0d, 0x77, 0x72, 0x69, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f,
	0x61, 0x64, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x6f, 0x6e, 0x5f, 0x62,
	0x75, 0x73, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0b, 0x52, 0x08, 0x69, 0x73, 0x4f,
	0x6e, 0x42, 0x75, 0x73, 0x79, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x09, 0x64, 0x62, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x62, 0x69,
	0x67, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x4d, 0x65, 0x74,
	0x61, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x0c,
	0x52, 0x08, 0x64, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x6c, 0x6f, 0x77, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x6b, 0x76, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73,
	0x63, 0x61, 0x6e, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x65, 0x61,
	0x64, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f,
	0x6b, 0x76, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x72, 0x6f, 0x77, 0x73,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x6b, 0x76, 0x73, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x73, 0x5f, 0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x73, 0x79, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x62, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xd0, 0x02,
	0x0a, 0x09, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x0a, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x32, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x15, 0x2e, 0x62, 0x69, 0x67, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x69, 0x67, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x48, 0x02, 0x52, 0x06, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x48, 0x03, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a,
	0x10, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x62, 0x69, 0x67, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x48, 0x04, 0x52, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f,
	0x61, 0x75, 0x74, 0x68, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x22, 0xef, 0x08, 0x0a, 0x0a, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x12,
	0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x12, 0x2f, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x69, 0x67, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x2e, 0x4b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x62, 0x69, 0x67, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x2e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x01, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x62, 0x69,
	0x67, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x48, 0x04, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15,
	0x2e, 0x62, 0x69, 0x67, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x4d,
	0x65, 0x64, 0x69, 0x75, 0x6d, 0x48, 0x05, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x4d, 0x65,
	0x64, 0x69, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x12, 0x17,
	0x0a, 0x07, 0x6c, 0x67, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x6c, 0x67, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2e, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x06, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x76, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x55, 0x73, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x12, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x5f, 0x6f, 0x6e, 0x5f, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x07, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x53, 0x69, 0x7a, 0x65, 0x4f,
	0x6e, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x48, 0x08,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x1d, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04,
	0x48, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x22, 0xd3,
	0x02, 0x0a, 0x0c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x11, 0x0a, 0x0d, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x49,
	0x6e, 0x69, 0x74, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x52,
	0x65, 0x61, 0x64, 0x79, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74,
	0x4c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x74, 0x4f, 0x6e, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x10, 0x06, 0x12, 0x12,
	0x0a, 0x0e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x74, 0x65, 0x64,
	0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x55, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x08, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x74, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x10, 0x09, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x10, 0x0a, 0x12, 0x14,
	0x0a, 0x10, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x55, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x61,
	0x69, 0x6c, 0x10, 0x0b, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x44, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x0c, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x74, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x10, 0x0d, 0x12,
	0x14, 0x0a, 0x10, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x55, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x32, 0x10, 0x0e, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x43,
	0x6f, 0x72, 0x72, 0x75, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x0f, 0x12, 0x17, 0x0a, 0x13, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x10, 0x10, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x6f, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x73, 0x42,
	0x15, 0x0a, 0x13, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x6f, 0x6e,
	0x5f, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x6a, 0x0a, 0x0d, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x62, 0x69, 0x67, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x07,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x62, 0x69, 0x67, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x22, 0x8b,
	0x01, 0x0a, 0x0e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x28, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x62, 0x69, 0x67, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x74, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x31, 0x0a, 0x07, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62,
	0x69, 0x67, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x2f, 0x5a, 0x2d,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x2d, 0x73, 0x68, 0x61, 0x77, 0x2f, 0x62, 0x69, 0x67, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_table_meta_proto_rawDescOnce sync.Once
	file_table_meta_proto_rawDescData = file_table_meta_proto_rawDesc
)

func file_table_meta_proto_rawDescGZIP() []byte {
	file_table_meta_proto_rawDescOnce.Do(func() {
		file_table_meta_proto_rawDescData = protoimpl.X.CompressGZIP(file_table_meta_proto_rawDescData)
	})
	return file_table_meta_proto_rawDescData
}

var file_table_meta_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_table_meta_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_table_meta_proto_goTypes = []interface{}{
	(TabletMeta_TabletStatus)(0), // 0: bigtable.TabletMeta.TabletStatus
	(*KeyRange)(nil),             // 1: bigtable.KeyRange
	(*TableCounter)(nil),         // 2: bigtable.TableCounter
	(*TabletCounter)(nil),        // 3: bigtable.TabletCounter
	(*TableMeta)(nil),            // 4: bigtable.TableMeta
	(*TabletMeta)(nil),           // 5: bigtable.TabletMeta
	(*TableMetaList)(nil),        // 6: bigtable.TableMetaList
	(*TabletMetaList)(nil),       // 7: bigtable.TabletMetaList
	(TableStatus)(0),             // 8: bigtable.TableStatus
	(*TableSchema)(nil),          // 9: bigtable.TableSchema
	(AuthPolicyType)(0),          // 10: bigtable.AuthPolicyType
	(CompactStatus)(0),           // 11: bigtable.CompactStatus
	(StoreMedium)(0),             // 12: bigtable.StoreMedium
}
var file_table_meta_proto_depIdxs = []int32{
	0,  // 0: bigtable.TabletCounter.db_status:type_name -> bigtable.TabletMeta.TabletStatus
	8,  // 1: bigtable.TableMeta.status:type_name -> bigtable.TableStatus
	9,  // 2: bigtable.TableMeta.schema:type_name -> bigtable.TableSchema
	10, // 3: bigtable.TableMeta.auth_policy_type:type_name -> bigtable.AuthPolicyType
	1,  // 4: bigtable.TabletMeta.key_range:type_name -> bigtable.KeyRange
	0,  // 5: bigtable.TabletMeta.status:type_name -> bigtable.TabletMeta.TabletStatus
	11, // 6: bigtable.TabletMeta.compact_status:type_name -> bigtable.CompactStatus
	12, // 7: bigtable.TabletMeta.store_medium:type_name -> bigtable.StoreMedium
	4,  // 8: bigtable.TableMetaList.meta:type_name -> bigtable.TableMeta
	2,  // 9: bigtable.TableMetaList.counter:type_name -> bigtable.TableCounter
	5,  // 10: bigtable.TabletMetaList.meta:type_name -> bigtable.TabletMeta
	3,  // 11: bigtable.TabletMetaList.counter:type_name -> bigtable.TabletCounter
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_table_meta_proto_init() }
func file_table_meta_proto_init() {
	if File_table_meta_proto != nil {
		return
	}
	file_table_schema_proto_init()
	file_status_code_proto_init()
	file_access_control_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_table_meta_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_table_meta_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_table_meta_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TabletCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_table_meta_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_table_meta_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TabletMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_table_meta_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableMetaList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_table_meta_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TabletMetaList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_table_meta_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_table_meta_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_table_meta_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_table_meta_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_table_meta_proto_msgTypes[4].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_table_meta_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_table_meta_proto_goTypes,
		DependencyIndexes: file_table_meta_proto_depIdxs,
		EnumInfos:         file_table_meta_proto_enumTypes,
		MessageInfos:      file_table_meta_proto_msgTypes,
	}.Build()
	File_table_meta_proto = out.File
	file_table_meta_proto_rawDesc = nil
	file_table_meta_proto_goTypes = nil
	file_table_meta_proto_depIdxs = nil
}
