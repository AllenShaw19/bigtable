// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.12
// source: tabletnode.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ExtraTsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  *string `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Value *uint64 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
}

func (x *ExtraTsInfo) Reset() {
	*x = ExtraTsInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tabletnode_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtraTsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtraTsInfo) ProtoMessage() {}

func (x *ExtraTsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_tabletnode_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtraTsInfo.ProtoReflect.Descriptor instead.
func (*ExtraTsInfo) Descriptor() ([]byte, []int) {
	return file_tabletnode_proto_rawDescGZIP(), []int{0}
}

func (x *ExtraTsInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ExtraTsInfo) GetValue() uint64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

type TabletNodeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addr                string         `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	Status              *StatusCode    `protobuf:"varint,2,opt,name=status,proto3,enum=bigtable.StatusCode,oneof" json:"status,omitempty"`
	Load                *uint64        `protobuf:"varint,3,opt,name=load,proto3,oneof" json:"load,omitempty"`
	Timestamp           *uint64        `protobuf:"varint,4,opt,name=timestamp,proto3,oneof" json:"timestamp,omitempty"`
	TabletTotal         *uint32        `protobuf:"varint,5,opt,name=tablet_total,json=tabletTotal,proto3,oneof" json:"tablet_total,omitempty"`
	TabletOnbusy        *uint32        `protobuf:"varint,6,opt,name=tablet_onbusy,json=tabletOnbusy,proto3,oneof" json:"tablet_onbusy,omitempty"`
	TabletCorruption    *uint32        `protobuf:"varint,7,opt,name=tablet_corruption,json=tabletCorruption,proto3,oneof" json:"tablet_corruption,omitempty"`
	LowReadCell         *uint32        `protobuf:"varint,11,opt,name=low_read_cell,json=lowReadCell,proto3,oneof" json:"low_read_cell,omitempty"`
	ScanRows            *uint32        `protobuf:"varint,12,opt,name=scan_rows,json=scanRows,proto3,oneof" json:"scan_rows,omitempty"`
	ScanKvs             *uint32        `protobuf:"varint,13,opt,name=scan_kvs,json=scanKvs,proto3,oneof" json:"scan_kvs,omitempty"`
	ScanSize            *uint32        `protobuf:"varint,14,opt,name=scan_size,json=scanSize,proto3,oneof" json:"scan_size,omitempty"`
	ReadRows            *uint32        `protobuf:"varint,15,opt,name=read_rows,json=readRows,proto3,oneof" json:"read_rows,omitempty"`
	ReadKvs             *uint32        `protobuf:"varint,16,opt,name=read_kvs,json=readKvs,proto3,oneof" json:"read_kvs,omitempty"`
	ReadSize            *uint32        `protobuf:"varint,17,opt,name=read_size,json=readSize,proto3,oneof" json:"read_size,omitempty"`
	WriteRows           *uint32        `protobuf:"varint,18,opt,name=write_rows,json=writeRows,proto3,oneof" json:"write_rows,omitempty"`
	WriteKvs            *uint32        `protobuf:"varint,19,opt,name=write_kvs,json=writeKvs,proto3,oneof" json:"write_kvs,omitempty"`
	WriteSize           *uint32        `protobuf:"varint,20,opt,name=write_size,json=writeSize,proto3,oneof" json:"write_size,omitempty"`
	MemUsed             *uint64        `protobuf:"varint,21,opt,name=mem_used,json=memUsed,proto3,oneof" json:"mem_used,omitempty"`
	NetTx               *uint32        `protobuf:"varint,22,opt,name=net_tx,json=netTx,proto3,oneof" json:"net_tx,omitempty"`
	NetRx               *uint32        `protobuf:"varint,23,opt,name=net_rx,json=netRx,proto3,oneof" json:"net_rx,omitempty"`
	DfsIoR              *uint32        `protobuf:"varint,24,opt,name=dfs_io_r,json=dfsIoR,proto3,oneof" json:"dfs_io_r,omitempty"`
	DfsIoW              *uint32        `protobuf:"varint,25,opt,name=dfs_io_w,json=dfsIoW,proto3,oneof" json:"dfs_io_w,omitempty"`
	LocalIoR            *uint32        `protobuf:"varint,26,opt,name=local_io_r,json=localIoR,proto3,oneof" json:"local_io_r,omitempty"`
	LocalIoW            *uint32        `protobuf:"varint,27,opt,name=local_io_w,json=localIoW,proto3,oneof" json:"local_io_w,omitempty"`
	DfsMasterQps        *uint32        `protobuf:"varint,28,opt,name=dfs_master_qps,json=dfsMasterQps,proto3,oneof" json:"dfs_master_qps,omitempty"` // Operations through dfs's master, including close, open, delete
	StatusMsg           *string        `protobuf:"bytes,31,opt,name=status_msg,json=statusMsg,proto3,oneof" json:"status_msg,omitempty"`
	TabletOnload        *uint32        `protobuf:"varint,32,opt,name=tablet_onload,json=tabletOnload,proto3,oneof" json:"tablet_onload,omitempty"`
	TabletOnsplit       *uint32        `protobuf:"varint,33,opt,name=tablet_onsplit,json=tabletOnsplit,proto3,oneof" json:"tablet_onsplit,omitempty"`
	TabletUnloading     *uint32        `protobuf:"varint,34,opt,name=tablet_unloading,json=tabletUnloading,proto3,oneof" json:"tablet_unloading,omitempty"`
	ExtraInfo           []*ExtraTsInfo `protobuf:"bytes,40,rep,name=extra_info,json=extraInfo,proto3" json:"extra_info,omitempty"`
	ReadPending         *uint32        `protobuf:"varint,41,opt,name=read_pending,json=readPending,proto3,oneof" json:"read_pending,omitempty"`
	WritePending        *uint32        `protobuf:"varint,42,opt,name=write_pending,json=writePending,proto3,oneof" json:"write_pending,omitempty"`
	ScanPending         *uint32        `protobuf:"varint,43,opt,name=scan_pending,json=scanPending,proto3,oneof" json:"scan_pending,omitempty"`
	CpuUsage            *float32       `protobuf:"fixed32,44,opt,name=cpu_usage,json=cpuUsage,proto3,oneof" json:"cpu_usage,omitempty"`
	ProcessStartTime    *int64         `protobuf:"varint,45,opt,name=process_start_time,json=processStartTime,proto3,oneof" json:"process_start_time,omitempty"` // Unix time in us
	PersistentCacheSize *uint64        `protobuf:"varint,46,opt,name=persistent_cache_size,json=persistentCacheSize,proto3,oneof" json:"persistent_cache_size,omitempty"`
}

func (x *TabletNodeInfo) Reset() {
	*x = TabletNodeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tabletnode_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TabletNodeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TabletNodeInfo) ProtoMessage() {}

func (x *TabletNodeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_tabletnode_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TabletNodeInfo.ProtoReflect.Descriptor instead.
func (*TabletNodeInfo) Descriptor() ([]byte, []int) {
	return file_tabletnode_proto_rawDescGZIP(), []int{1}
}

func (x *TabletNodeInfo) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *TabletNodeInfo) GetStatus() StatusCode {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return StatusCode_OK
}

func (x *TabletNodeInfo) GetLoad() uint64 {
	if x != nil && x.Load != nil {
		return *x.Load
	}
	return 0
}

func (x *TabletNodeInfo) GetTimestamp() uint64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *TabletNodeInfo) GetTabletTotal() uint32 {
	if x != nil && x.TabletTotal != nil {
		return *x.TabletTotal
	}
	return 0
}

func (x *TabletNodeInfo) GetTabletOnbusy() uint32 {
	if x != nil && x.TabletOnbusy != nil {
		return *x.TabletOnbusy
	}
	return 0
}

func (x *TabletNodeInfo) GetTabletCorruption() uint32 {
	if x != nil && x.TabletCorruption != nil {
		return *x.TabletCorruption
	}
	return 0
}

func (x *TabletNodeInfo) GetLowReadCell() uint32 {
	if x != nil && x.LowReadCell != nil {
		return *x.LowReadCell
	}
	return 0
}

func (x *TabletNodeInfo) GetScanRows() uint32 {
	if x != nil && x.ScanRows != nil {
		return *x.ScanRows
	}
	return 0
}

func (x *TabletNodeInfo) GetScanKvs() uint32 {
	if x != nil && x.ScanKvs != nil {
		return *x.ScanKvs
	}
	return 0
}

func (x *TabletNodeInfo) GetScanSize() uint32 {
	if x != nil && x.ScanSize != nil {
		return *x.ScanSize
	}
	return 0
}

func (x *TabletNodeInfo) GetReadRows() uint32 {
	if x != nil && x.ReadRows != nil {
		return *x.ReadRows
	}
	return 0
}

func (x *TabletNodeInfo) GetReadKvs() uint32 {
	if x != nil && x.ReadKvs != nil {
		return *x.ReadKvs
	}
	return 0
}

func (x *TabletNodeInfo) GetReadSize() uint32 {
	if x != nil && x.ReadSize != nil {
		return *x.ReadSize
	}
	return 0
}

func (x *TabletNodeInfo) GetWriteRows() uint32 {
	if x != nil && x.WriteRows != nil {
		return *x.WriteRows
	}
	return 0
}

func (x *TabletNodeInfo) GetWriteKvs() uint32 {
	if x != nil && x.WriteKvs != nil {
		return *x.WriteKvs
	}
	return 0
}

func (x *TabletNodeInfo) GetWriteSize() uint32 {
	if x != nil && x.WriteSize != nil {
		return *x.WriteSize
	}
	return 0
}

func (x *TabletNodeInfo) GetMemUsed() uint64 {
	if x != nil && x.MemUsed != nil {
		return *x.MemUsed
	}
	return 0
}

func (x *TabletNodeInfo) GetNetTx() uint32 {
	if x != nil && x.NetTx != nil {
		return *x.NetTx
	}
	return 0
}

func (x *TabletNodeInfo) GetNetRx() uint32 {
	if x != nil && x.NetRx != nil {
		return *x.NetRx
	}
	return 0
}

func (x *TabletNodeInfo) GetDfsIoR() uint32 {
	if x != nil && x.DfsIoR != nil {
		return *x.DfsIoR
	}
	return 0
}

func (x *TabletNodeInfo) GetDfsIoW() uint32 {
	if x != nil && x.DfsIoW != nil {
		return *x.DfsIoW
	}
	return 0
}

func (x *TabletNodeInfo) GetLocalIoR() uint32 {
	if x != nil && x.LocalIoR != nil {
		return *x.LocalIoR
	}
	return 0
}

func (x *TabletNodeInfo) GetLocalIoW() uint32 {
	if x != nil && x.LocalIoW != nil {
		return *x.LocalIoW
	}
	return 0
}

func (x *TabletNodeInfo) GetDfsMasterQps() uint32 {
	if x != nil && x.DfsMasterQps != nil {
		return *x.DfsMasterQps
	}
	return 0
}

func (x *TabletNodeInfo) GetStatusMsg() string {
	if x != nil && x.StatusMsg != nil {
		return *x.StatusMsg
	}
	return ""
}

func (x *TabletNodeInfo) GetTabletOnload() uint32 {
	if x != nil && x.TabletOnload != nil {
		return *x.TabletOnload
	}
	return 0
}

func (x *TabletNodeInfo) GetTabletOnsplit() uint32 {
	if x != nil && x.TabletOnsplit != nil {
		return *x.TabletOnsplit
	}
	return 0
}

func (x *TabletNodeInfo) GetTabletUnloading() uint32 {
	if x != nil && x.TabletUnloading != nil {
		return *x.TabletUnloading
	}
	return 0
}

func (x *TabletNodeInfo) GetExtraInfo() []*ExtraTsInfo {
	if x != nil {
		return x.ExtraInfo
	}
	return nil
}

func (x *TabletNodeInfo) GetReadPending() uint32 {
	if x != nil && x.ReadPending != nil {
		return *x.ReadPending
	}
	return 0
}

func (x *TabletNodeInfo) GetWritePending() uint32 {
	if x != nil && x.WritePending != nil {
		return *x.WritePending
	}
	return 0
}

func (x *TabletNodeInfo) GetScanPending() uint32 {
	if x != nil && x.ScanPending != nil {
		return *x.ScanPending
	}
	return 0
}

func (x *TabletNodeInfo) GetCpuUsage() float32 {
	if x != nil && x.CpuUsage != nil {
		return *x.CpuUsage
	}
	return 0
}

func (x *TabletNodeInfo) GetProcessStartTime() int64 {
	if x != nil && x.ProcessStartTime != nil {
		return *x.ProcessStartTime
	}
	return 0
}

func (x *TabletNodeInfo) GetPersistentCacheSize() uint64 {
	if x != nil && x.PersistentCacheSize != nil {
		return *x.PersistentCacheSize
	}
	return 0
}

var File_tabletnode_proto protoreflect.FileDescriptor

var file_tabletnode_proto_rawDesc = []byte{
	0x0a, 0x10, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x08, 0x62, 0x69, 0x67, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0x11, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x54, 0x0a, 0x0b, 0x45, 0x78, 0x74, 0x72, 0x61, 0x54, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88,
	0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xf6, 0x0e, 0x0a, 0x0e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74,
	0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x31, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x62,
	0x69, 0x67, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x17, 0x0a, 0x04, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52,
	0x04, 0x6c, 0x6f, 0x61, 0x64, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x48, 0x02, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x03, 0x52, 0x0b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x6f, 0x6e,
	0x62, 0x75, 0x73, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x04, 0x52, 0x0c, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x4f, 0x6e, 0x62, 0x75, 0x73, 0x79, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a,
	0x11, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x75, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x05, 0x52, 0x10, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x74, 0x43, 0x6f, 0x72, 0x72, 0x75, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x27, 0x0a, 0x0d, 0x6c, 0x6f, 0x77, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x65, 0x6c, 0x6c,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x06, 0x52, 0x0b, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x61,
	0x64, 0x43, 0x65, 0x6c, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x63, 0x61, 0x6e,
	0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x07, 0x52, 0x08, 0x73,
	0x63, 0x61, 0x6e, 0x52, 0x6f, 0x77, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x73, 0x63,
	0x61, 0x6e, 0x5f, 0x6b, 0x76, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x08, 0x52, 0x07,
	0x73, 0x63, 0x61, 0x6e, 0x4b, 0x76, 0x73, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x63,
	0x61, 0x6e, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x09, 0x52,
	0x08, 0x73, 0x63, 0x61, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x0a, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x52, 0x6f, 0x77, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1e,
	0x0a, 0x08, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6b, 0x76, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x0b, 0x52, 0x07, 0x72, 0x65, 0x61, 0x64, 0x4b, 0x76, 0x73, 0x88, 0x01, 0x01, 0x12, 0x20,
	0x0a, 0x09, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x0c, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x0a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x0d, 0x52, 0x09, 0x77, 0x72, 0x69, 0x74, 0x65, 0x52, 0x6f, 0x77,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x6b, 0x76,
	0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0e, 0x52, 0x08, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x4b, 0x76, 0x73, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0f, 0x52, 0x09, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6d, 0x65,
	0x6d, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x04, 0x48, 0x10, 0x52, 0x07,
	0x6d, 0x65, 0x6d, 0x55, 0x73, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x6e, 0x65,
	0x74, 0x5f, 0x74, 0x78, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x11, 0x52, 0x05, 0x6e, 0x65,
	0x74, 0x54, 0x78, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x6e, 0x65, 0x74, 0x5f, 0x72, 0x78,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x12, 0x52, 0x05, 0x6e, 0x65, 0x74, 0x52, 0x78, 0x88,
	0x01, 0x01, 0x12, 0x1d, 0x0a, 0x08, 0x64, 0x66, 0x73, 0x5f, 0x69, 0x6f, 0x5f, 0x72, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x13, 0x52, 0x06, 0x64, 0x66, 0x73, 0x49, 0x6f, 0x52, 0x88, 0x01,
	0x01, 0x12, 0x1d, 0x0a, 0x08, 0x64, 0x66, 0x73, 0x5f, 0x69, 0x6f, 0x5f, 0x77, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x14, 0x52, 0x06, 0x64, 0x66, 0x73, 0x49, 0x6f, 0x57, 0x88, 0x01, 0x01,
	0x12, 0x21, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x6f, 0x5f, 0x72, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x15, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x6f, 0x52,
	0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x6f, 0x5f,
	0x77, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x16, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x49, 0x6f, 0x57, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x64, 0x66, 0x73, 0x5f, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x71, 0x70, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x17,
	0x52, 0x0c, 0x64, 0x66, 0x73, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x51, 0x70, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6d, 0x73, 0x67, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x18, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d,
	0x73, 0x67, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f,
	0x6f, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x19, 0x52, 0x0c,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x4f, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x2a, 0x0a, 0x0e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x6f, 0x6e, 0x73, 0x70, 0x6c, 0x69,
	0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x1a, 0x52, 0x0d, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x74, 0x4f, 0x6e, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x75, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x1b, 0x52, 0x0f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x55,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x0a, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x28, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x62, 0x69, 0x67, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x54, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x26, 0x0a, 0x0c, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x1c, 0x52, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x50,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x1d, 0x52, 0x0c, 0x77, 0x72, 0x69, 0x74, 0x65, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x70, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x1e, 0x52, 0x0b, 0x73, 0x63, 0x61,
	0x6e, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x63,
	0x70, 0x75, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x02, 0x48, 0x1f,
	0x52, 0x08, 0x63, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a,
	0x12, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x03, 0x48, 0x20, 0x52, 0x10, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x37, 0x0a, 0x15, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x04, 0x48,
	0x21, 0x52, 0x13, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x6f, 0x6e, 0x62, 0x75, 0x73, 0x79, 0x42, 0x14,
	0x0a, 0x12, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x75, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6c, 0x6f, 0x77, 0x5f, 0x72, 0x65, 0x61,
	0x64, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x5f,
	0x72, 0x6f, 0x77, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x6b, 0x76,
	0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6b, 0x76, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72,
	0x65, 0x61, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x5f, 0x6b, 0x76, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x65, 0x6d, 0x5f, 0x75, 0x73, 0x65,
	0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6e, 0x65, 0x74, 0x5f, 0x74, 0x78, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x6e, 0x65, 0x74, 0x5f, 0x72, 0x78, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x66, 0x73, 0x5f,
	0x69, 0x6f, 0x5f, 0x72, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x66, 0x73, 0x5f, 0x69, 0x6f, 0x5f,
	0x77, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x6f, 0x5f, 0x72,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x6f, 0x5f, 0x77, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x64, 0x66, 0x73, 0x5f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x71,
	0x70, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6d, 0x73,
	0x67, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x6f, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x6f,
	0x6e, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x74, 0x5f, 0x75, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x70, 0x75, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x42, 0x15, 0x0a,
	0x13, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x2f,
	0x5a, 0x2d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x2d, 0x73, 0x68, 0x61, 0x77, 0x2f, 0x62, 0x69, 0x67, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tabletnode_proto_rawDescOnce sync.Once
	file_tabletnode_proto_rawDescData = file_tabletnode_proto_rawDesc
)

func file_tabletnode_proto_rawDescGZIP() []byte {
	file_tabletnode_proto_rawDescOnce.Do(func() {
		file_tabletnode_proto_rawDescData = protoimpl.X.CompressGZIP(file_tabletnode_proto_rawDescData)
	})
	return file_tabletnode_proto_rawDescData
}

var file_tabletnode_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_tabletnode_proto_goTypes = []interface{}{
	(*ExtraTsInfo)(nil),    // 0: bigtable.ExtraTsInfo
	(*TabletNodeInfo)(nil), // 1: bigtable.TabletNodeInfo
	(StatusCode)(0),        // 2: bigtable.StatusCode
}
var file_tabletnode_proto_depIdxs = []int32{
	2, // 0: bigtable.TabletNodeInfo.status:type_name -> bigtable.StatusCode
	0, // 1: bigtable.TabletNodeInfo.extra_info:type_name -> bigtable.ExtraTsInfo
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_tabletnode_proto_init() }
func file_tabletnode_proto_init() {
	if File_tabletnode_proto != nil {
		return
	}
	file_status_code_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_tabletnode_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtraTsInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tabletnode_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TabletNodeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_tabletnode_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_tabletnode_proto_msgTypes[1].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tabletnode_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tabletnode_proto_goTypes,
		DependencyIndexes: file_tabletnode_proto_depIdxs,
		MessageInfos:      file_tabletnode_proto_msgTypes,
	}.Build()
	File_tabletnode_proto = out.File
	file_tabletnode_proto_rawDesc = nil
	file_tabletnode_proto_goTypes = nil
	file_tabletnode_proto_depIdxs = nil
}
