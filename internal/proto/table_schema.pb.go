// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.12
// source: table_schema.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StoreMedium int32

const (
	StoreMedium_DiskStore   StoreMedium = 0
	StoreMedium_FlashStore  StoreMedium = 1
	StoreMedium_MemoryStore StoreMedium = 2
)

// Enum value maps for StoreMedium.
var (
	StoreMedium_name = map[int32]string{
		0: "DiskStore",
		1: "FlashStore",
		2: "MemoryStore",
	}
	StoreMedium_value = map[string]int32{
		"DiskStore":   0,
		"FlashStore":  1,
		"MemoryStore": 2,
	}
)

func (x StoreMedium) Enum() *StoreMedium {
	p := new(StoreMedium)
	*p = x
	return p
}

func (x StoreMedium) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StoreMedium) Descriptor() protoreflect.EnumDescriptor {
	return file_table_schema_proto_enumTypes[0].Descriptor()
}

func (StoreMedium) Type() protoreflect.EnumType {
	return &file_table_schema_proto_enumTypes[0]
}

func (x StoreMedium) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StoreMedium.Descriptor instead.
func (StoreMedium) EnumDescriptor() ([]byte, []int) {
	return file_table_schema_proto_rawDescGZIP(), []int{0}
}

type RawKey int32

const (
	RawKey_Readable  RawKey = 0
	RawKey_Binary    RawKey = 1
	RawKey_TTLKv     RawKey = 2 // Key-value-pair with ttl in key
	RawKey_GeneralKv RawKey = 3
)

// Enum value maps for RawKey.
var (
	RawKey_name = map[int32]string{
		0: "Readable",
		1: "Binary",
		2: "TTLKv",
		3: "GeneralKv",
	}
	RawKey_value = map[string]int32{
		"Readable":  0,
		"Binary":    1,
		"TTLKv":     2,
		"GeneralKv": 3,
	}
)

func (x RawKey) Enum() *RawKey {
	p := new(RawKey)
	*p = x
	return p
}

func (x RawKey) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RawKey) Descriptor() protoreflect.EnumDescriptor {
	return file_table_schema_proto_enumTypes[1].Descriptor()
}

func (RawKey) Type() protoreflect.EnumType {
	return &file_table_schema_proto_enumTypes[1]
}

func (x RawKey) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RawKey.Descriptor instead.
func (RawKey) EnumDescriptor() ([]byte, []int) {
	return file_table_schema_proto_rawDescGZIP(), []int{1}
}

type ColumnFamilySchema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                         int32       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                       string      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	StoreType                  StoreMedium `protobuf:"varint,3,opt,name=store_type,json=storeType,proto3,enum=bigtable.StoreMedium" json:"store_type,omitempty"` // default DiskStore
	CompressType               bool        `protobuf:"varint,4,opt,name=compress_type,json=compressType,proto3" json:"compress_type,omitempty"`                  // default false
	BlockSize                  int32       `protobuf:"varint,5,opt,name=block_size,json=blockSize,proto3" json:"block_size,omitempty"`                           // KB default 4KB
	UseBloomFilter             bool        `protobuf:"varint,6,opt,name=use_bloom_filter,json=useBloomFilter,proto3" json:"use_bloom_filter,omitempty"`
	IsDel                      bool        `protobuf:"varint,7,opt,name=is_del,json=isDel,proto3" json:"is_del,omitempty"`
	UseMemtableOnLeveldb       bool        `protobuf:"varint,8,opt,name=use_memtable_on_leveldb,json=useMemtableOnLeveldb,proto3" json:"use_memtable_on_leveldb,omitempty"`                     // default false
	MemtableLdbWriteBufferSize int32       `protobuf:"varint,9,opt,name=memtable_ldb_write_buffer_size,json=memtableLdbWriteBufferSize,proto3" json:"memtable_ldb_write_buffer_size,omitempty"` // KB default 1000
	MemtableLdbBlockSize       int32       `protobuf:"varint,10,opt,name=memtable_ldb_block_size,json=memtableLdbBlockSize,proto3" json:"memtable_ldb_block_size,omitempty"`                    // KB default 4
	SstSize                    int32       `protobuf:"varint,11,opt,name=sst_size,json=sstSize,proto3" json:"sst_size,omitempty"`                                                               // Bytes default 8388608
}

func (x *ColumnFamilySchema) Reset() {
	*x = ColumnFamilySchema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_table_schema_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnFamilySchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnFamilySchema) ProtoMessage() {}

func (x *ColumnFamilySchema) ProtoReflect() protoreflect.Message {
	mi := &file_table_schema_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnFamilySchema.ProtoReflect.Descriptor instead.
func (*ColumnFamilySchema) Descriptor() ([]byte, []int) {
	return file_table_schema_proto_rawDescGZIP(), []int{0}
}

func (x *ColumnFamilySchema) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ColumnFamilySchema) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ColumnFamilySchema) GetStoreType() StoreMedium {
	if x != nil {
		return x.StoreType
	}
	return StoreMedium_DiskStore
}

func (x *ColumnFamilySchema) GetCompressType() bool {
	if x != nil {
		return x.CompressType
	}
	return false
}

func (x *ColumnFamilySchema) GetBlockSize() int32 {
	if x != nil {
		return x.BlockSize
	}
	return 0
}

func (x *ColumnFamilySchema) GetUseBloomFilter() bool {
	if x != nil {
		return x.UseBloomFilter
	}
	return false
}

func (x *ColumnFamilySchema) GetIsDel() bool {
	if x != nil {
		return x.IsDel
	}
	return false
}

func (x *ColumnFamilySchema) GetUseMemtableOnLeveldb() bool {
	if x != nil {
		return x.UseMemtableOnLeveldb
	}
	return false
}

func (x *ColumnFamilySchema) GetMemtableLdbWriteBufferSize() int32 {
	if x != nil {
		return x.MemtableLdbWriteBufferSize
	}
	return 0
}

func (x *ColumnFamilySchema) GetMemtableLdbBlockSize() int32 {
	if x != nil {
		return x.MemtableLdbBlockSize
	}
	return 0
}

func (x *ColumnFamilySchema) GetSstSize() int32 {
	if x != nil {
		return x.SstSize
	}
	return 0
}

type LocalityGroupSchema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	LocalityGroup string  `protobuf:"bytes,3,opt,name=locality_group,json=localityGroup,proto3" json:"locality_group,omitempty"`
	Owner         int32   `protobuf:"varint,4,opt,name=owner,proto3" json:"owner,omitempty"`
	Acl           []int64 `protobuf:"varint,5,rep,packed,name=acl,proto3" json:"acl,omitempty"`
	MaxVersions   int32   `protobuf:"varint,6,opt,name=max_versions,json=maxVersions,proto3" json:"max_versions,omitempty"` // default 1
	MinVersions   int32   `protobuf:"varint,7,opt,name=min_versions,json=minVersions,proto3" json:"min_versions,omitempty"` // default 1
	TimeToLive    int32   `protobuf:"varint,8,opt,name=time_to_live,json=timeToLive,proto3" json:"time_to_live,omitempty"`  // default 0 单位:秒(0:不过期，<0:提前过期，>0:延后过期)
	DiskQuota     int64   `protobuf:"varint,9,opt,name=disk_quota,json=diskQuota,proto3" json:"disk_quota,omitempty"`
	Type          string  `protobuf:"bytes,10,opt,name=type,proto3" json:"type,omitempty"`
	Gtxb          bool    `protobuf:"varint,11,opt,name=gtxb,proto3" json:"gtxb,omitempty"` // default false global transaction
	Notify        bool    `protobuf:"varint,12,opt,name=notify,proto3" json:"notify,omitempty"`
}

func (x *LocalityGroupSchema) Reset() {
	*x = LocalityGroupSchema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_table_schema_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocalityGroupSchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalityGroupSchema) ProtoMessage() {}

func (x *LocalityGroupSchema) ProtoReflect() protoreflect.Message {
	mi := &file_table_schema_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalityGroupSchema.ProtoReflect.Descriptor instead.
func (*LocalityGroupSchema) Descriptor() ([]byte, []int) {
	return file_table_schema_proto_rawDescGZIP(), []int{1}
}

func (x *LocalityGroupSchema) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LocalityGroupSchema) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LocalityGroupSchema) GetLocalityGroup() string {
	if x != nil {
		return x.LocalityGroup
	}
	return ""
}

func (x *LocalityGroupSchema) GetOwner() int32 {
	if x != nil {
		return x.Owner
	}
	return 0
}

func (x *LocalityGroupSchema) GetAcl() []int64 {
	if x != nil {
		return x.Acl
	}
	return nil
}

func (x *LocalityGroupSchema) GetMaxVersions() int32 {
	if x != nil {
		return x.MaxVersions
	}
	return 0
}

func (x *LocalityGroupSchema) GetMinVersions() int32 {
	if x != nil {
		return x.MinVersions
	}
	return 0
}

func (x *LocalityGroupSchema) GetTimeToLive() int32 {
	if x != nil {
		return x.TimeToLive
	}
	return 0
}

func (x *LocalityGroupSchema) GetDiskQuota() int64 {
	if x != nil {
		return x.DiskQuota
	}
	return 0
}

func (x *LocalityGroupSchema) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *LocalityGroupSchema) GetGtxb() bool {
	if x != nil {
		return x.Gtxb
	}
	return false
}

func (x *LocalityGroupSchema) GetNotify() bool {
	if x != nil {
		return x.Notify
	}
	return false
}

type TableSchema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                  string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Owner                 int32                  `protobuf:"varint,3,opt,name=owner,proto3" json:"owner,omitempty"`
	Acl                   []int32                `protobuf:"varint,4,rep,packed,name=acl,proto3" json:"acl,omitempty"`
	ColumnFamilies        []*ColumnFamilySchema  `protobuf:"bytes,5,rep,name=column_families,json=columnFamilies,proto3" json:"column_families,omitempty"`
	LocalityGroups        []*LocalityGroupSchema `protobuf:"bytes,6,rep,name=locality_groups,json=localityGroups,proto3" json:"locality_groups,omitempty"`
	RawKey                RawKey                 `protobuf:"varint,7,opt,name=raw_key,json=rawKey,proto3,enum=bigtable.RawKey" json:"raw_key,omitempty"` // default Readable
	SplitSize             int64                  `protobuf:"varint,8,opt,name=split_size,json=splitSize,proto3" json:"split_size,omitempty"`             // MB
	MergeSize             int64                  `protobuf:"varint,10,opt,name=merge_size,json=mergeSize,proto3" json:"merge_size,omitempty"`            // MB
	DisbaleWal            bool                   `protobuf:"varint,11,opt,name=disbale_wal,json=disbaleWal,proto3" json:"disbale_wal,omitempty"`
	AdminGroup            string                 `protobuf:"bytes,12,opt,name=admin_group,json=adminGroup,proto3" json:"admin_group,omitempty"` // users in admin_group can admin this table
	Alias                 string                 `protobuf:"bytes,13,opt,name=alias,proto3" json:"alias,omitempty"`
	Admin                 string                 `protobuf:"bytes,14,opt,name=admin,proto3" json:"admin,omitempty"`
	EnableTxn             bool                   `protobuf:"varint,15,opt,name=enable_txn,json=enableTxn,proto3" json:"enable_txn,omitempty"`
	EnbaleHash            bool                   `protobuf:"varint,16,opt,name=enbale_hash,json=enbaleHash,proto3" json:"enbale_hash,omitempty"`
	BloomFilterBitsPerKey uint32                 `protobuf:"varint,17,opt,name=bloom_filter_bits_per_key,json=bloomFilterBitsPerKey,proto3" json:"bloom_filter_bits_per_key,omitempty"` // default 10
}

func (x *TableSchema) Reset() {
	*x = TableSchema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_table_schema_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableSchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableSchema) ProtoMessage() {}

func (x *TableSchema) ProtoReflect() protoreflect.Message {
	mi := &file_table_schema_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableSchema.ProtoReflect.Descriptor instead.
func (*TableSchema) Descriptor() ([]byte, []int) {
	return file_table_schema_proto_rawDescGZIP(), []int{2}
}

func (x *TableSchema) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TableSchema) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TableSchema) GetOwner() int32 {
	if x != nil {
		return x.Owner
	}
	return 0
}

func (x *TableSchema) GetAcl() []int32 {
	if x != nil {
		return x.Acl
	}
	return nil
}

func (x *TableSchema) GetColumnFamilies() []*ColumnFamilySchema {
	if x != nil {
		return x.ColumnFamilies
	}
	return nil
}

func (x *TableSchema) GetLocalityGroups() []*LocalityGroupSchema {
	if x != nil {
		return x.LocalityGroups
	}
	return nil
}

func (x *TableSchema) GetRawKey() RawKey {
	if x != nil {
		return x.RawKey
	}
	return RawKey_Readable
}

func (x *TableSchema) GetSplitSize() int64 {
	if x != nil {
		return x.SplitSize
	}
	return 0
}

func (x *TableSchema) GetMergeSize() int64 {
	if x != nil {
		return x.MergeSize
	}
	return 0
}

func (x *TableSchema) GetDisbaleWal() bool {
	if x != nil {
		return x.DisbaleWal
	}
	return false
}

func (x *TableSchema) GetAdminGroup() string {
	if x != nil {
		return x.AdminGroup
	}
	return ""
}

func (x *TableSchema) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *TableSchema) GetAdmin() string {
	if x != nil {
		return x.Admin
	}
	return ""
}

func (x *TableSchema) GetEnableTxn() bool {
	if x != nil {
		return x.EnableTxn
	}
	return false
}

func (x *TableSchema) GetEnbaleHash() bool {
	if x != nil {
		return x.EnbaleHash
	}
	return false
}

func (x *TableSchema) GetBloomFilterBitsPerKey() uint32 {
	if x != nil {
		return x.BloomFilterBitsPerKey
	}
	return 0
}

var File_table_schema_proto protoreflect.FileDescriptor

var file_table_schema_proto_rawDesc = []byte{
	0x0a, 0x12, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x62, 0x69, 0x67, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xc0,
	0x03, 0x0a, 0x12, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x0a, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e,
	0x62, 0x69, 0x67, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x4d, 0x65,
	0x64, 0x69, 0x75, 0x6d, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x6f, 0x6d,
	0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x75,
	0x73, 0x65, 0x42, 0x6c, 0x6f, 0x6f, 0x6d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x15, 0x0a,
	0x06, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69,
	0x73, 0x44, 0x65, 0x6c, 0x12, 0x35, 0x0a, 0x17, 0x75, 0x73, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x64, 0x62, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x75, 0x73, 0x65, 0x4d, 0x65, 0x6d, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x4f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x64, 0x62, 0x12, 0x42, 0x0a, 0x1e, 0x6d,
	0x65, 0x6d, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6c, 0x64, 0x62, 0x5f, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x1a, 0x6d, 0x65, 0x6d, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x64, 0x62,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x35, 0x0a, 0x17, 0x6d, 0x65, 0x6d, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6c, 0x64, 0x62, 0x5f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x14, 0x6d, 0x65, 0x6d, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x64, 0x62, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x73, 0x74, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x73, 0x74, 0x53, 0x69, 0x7a,
	0x65, 0x22, 0xcf, 0x02, 0x0a, 0x13, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x63,
	0x6c, 0x18, 0x05, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x61, 0x63, 0x6c, 0x12, 0x21, 0x0a, 0x0c,
	0x6d, 0x61, 0x78, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x6c, 0x69,
	0x76, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x6f,
	0x4c, 0x69, 0x76, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x71, 0x75, 0x6f,
	0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x69, 0x73, 0x6b, 0x51, 0x75,
	0x6f, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x74, 0x78, 0x62, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x67, 0x74, 0x78, 0x62, 0x12, 0x16, 0x0a, 0x06, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x22, 0xb9, 0x04, 0x0a, 0x0b, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x10, 0x0a,
	0x03, 0x61, 0x63, 0x6c, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x03, 0x61, 0x63, 0x6c, 0x12,
	0x45, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x69,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x69, 0x67, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x46, 0x61,
	0x6d, 0x69, 0x6c, 0x69, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x62, 0x69, 0x67, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x0e,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x29,
	0x0a, 0x07, 0x72, 0x61, 0x77, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x10, 0x2e, 0x62, 0x69, 0x67, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x52, 0x61, 0x77, 0x4b, 0x65,
	0x79, 0x52, 0x06, 0x72, 0x61, 0x77, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x70, 0x6c,
	0x69, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73,
	0x70, 0x6c, 0x69, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x72, 0x67,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x65,
	0x72, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x62, 0x61,
	0x6c, 0x65, 0x5f, 0x77, 0x61, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x64, 0x69,
	0x73, 0x62, 0x61, 0x6c, 0x65, 0x57, 0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69,
	0x61, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x74, 0x78, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x54, 0x78, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x62, 0x61, 0x6c, 0x65, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x65, 0x6e, 0x62, 0x61, 0x6c,
	0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x38, 0x0a, 0x19, 0x62, 0x6c, 0x6f, 0x6f, 0x6d, 0x5f, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x62, 0x69, 0x74, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x62, 0x6c, 0x6f, 0x6f, 0x6d, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x69, 0x74, 0x73, 0x50, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x2a,
	0x3d, 0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x12, 0x0d,
	0x0a, 0x09, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x10, 0x00, 0x12, 0x0e, 0x0a,
	0x0a, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x10, 0x01, 0x12, 0x0f, 0x0a,
	0x0b, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x10, 0x02, 0x2a, 0x3c,
	0x0a, 0x06, 0x52, 0x61, 0x77, 0x4b, 0x65, 0x79, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x65, 0x61, 0x64,
	0x61, 0x62, 0x6c, 0x65, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79,
	0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x54, 0x4c, 0x4b, 0x76, 0x10, 0x02, 0x12, 0x0d, 0x0a,
	0x09, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x4b, 0x76, 0x10, 0x03, 0x42, 0x2f, 0x5a, 0x2d,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x2d, 0x73, 0x68, 0x61, 0x77, 0x2f, 0x62, 0x69, 0x67, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_table_schema_proto_rawDescOnce sync.Once
	file_table_schema_proto_rawDescData = file_table_schema_proto_rawDesc
)

func file_table_schema_proto_rawDescGZIP() []byte {
	file_table_schema_proto_rawDescOnce.Do(func() {
		file_table_schema_proto_rawDescData = protoimpl.X.CompressGZIP(file_table_schema_proto_rawDescData)
	})
	return file_table_schema_proto_rawDescData
}

var file_table_schema_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_table_schema_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_table_schema_proto_goTypes = []interface{}{
	(StoreMedium)(0),            // 0: bigtable.StoreMedium
	(RawKey)(0),                 // 1: bigtable.RawKey
	(*ColumnFamilySchema)(nil),  // 2: bigtable.ColumnFamilySchema
	(*LocalityGroupSchema)(nil), // 3: bigtable.LocalityGroupSchema
	(*TableSchema)(nil),         // 4: bigtable.TableSchema
}
var file_table_schema_proto_depIdxs = []int32{
	0, // 0: bigtable.ColumnFamilySchema.store_type:type_name -> bigtable.StoreMedium
	2, // 1: bigtable.TableSchema.column_families:type_name -> bigtable.ColumnFamilySchema
	3, // 2: bigtable.TableSchema.locality_groups:type_name -> bigtable.LocalityGroupSchema
	1, // 3: bigtable.TableSchema.raw_key:type_name -> bigtable.RawKey
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_table_schema_proto_init() }
func file_table_schema_proto_init() {
	if File_table_schema_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_table_schema_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColumnFamilySchema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_table_schema_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocalityGroupSchema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_table_schema_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableSchema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_table_schema_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_table_schema_proto_goTypes,
		DependencyIndexes: file_table_schema_proto_depIdxs,
		EnumInfos:         file_table_schema_proto_enumTypes,
		MessageInfos:      file_table_schema_proto_msgTypes,
	}.Build()
	File_table_schema_proto = out.File
	file_table_schema_proto_rawDesc = nil
	file_table_schema_proto_goTypes = nil
	file_table_schema_proto_depIdxs = nil
}
